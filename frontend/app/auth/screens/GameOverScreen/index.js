import React, { useEffect } from 'react';
import { View, Text, Button, StyleSheet } from 'react-native';
import { useNavigation, useRouter } from 'expo-router';
import { useLocalSearchParams } from 'expo-router';
import { LinearGradient } from 'expo-linear-gradient';
const GameOverScreen = () => {
    const { score , elapsedTime , level} = useLocalSearchParams();
  const router = useRouter();
    const navigation = useNavigation();
    useEffect(()=>{
        navigation.setOptions({
            headerShown: false
        })
    },[])
  // Quay l·∫°i m√†n h√¨nh game (ho·∫∑c m√†n h√¨nh c√¢u h·ªèi ti·∫øp theo)
  const handleRestart = () => {
    // router.push('/auth/screens/EasyGameIntro'); // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh game, ƒëi·ªÅu ch·ªânh theo t√™n m√†n h√¨nh c·ªßa b·∫°n
    switch (level) {
      case 'easy':
        router.push('/auth/screens/EasyGameIntro');
        break;
      case 'medium':
        router.push('/auth/screens/MediumGameIntro');
        break;
      case 'hard':
        router.push('/auth/screens/HardGameIntro');
        break;
      default:
        router.push('/auth/screens/EasyGameIntro'); // fallback
    }
  };

  const QuizGame = () => {
    router.push('/auth/screens/HomeScreen'); // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh game, ƒëi·ªÅu ch·ªânh theo t√™n m√†n h√¨nh c·ªßa b·∫°n
  };

  const formatTime = (elapsedTime) => {
    const minutes = Math.floor(elapsedTime / 60); // L·∫•y ph·∫ßn nguy√™n ƒë·ªÉ t√≠nh ph√∫t
    const seconds = elapsedTime % 60; // L·∫•y ph·∫ßn d∆∞ ƒë·ªÉ t√≠nh gi√¢y
  
    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng "X ph√∫t Y gi√¢y" ho·∫∑c ch·ªâ "X ph√∫t" n·∫øu kh√¥ng c√≥ gi√¢y
    return minutes > 0 ? `${minutes} ph√∫t ${seconds} gi√¢y` : `${seconds} gi√¢y`;
  };

  return (
    <LinearGradient
      colors={['#e0f7fa', '#fce4ec', '#fffde7']} // Xanh nh·∫°t, h·ªìng nh·∫°t, v√†ng kem
      style={styles.container}
    >
    <Text style={styles.gameOverText}>üéÆ Tr√≤ ch∆°i k·∫øt th√∫c!</Text>
      <Text style={styles.finalScore}>‚ú® ƒêi·ªÉm c·ªßa b·∫°n: <Text style={styles.scoreNumber}>{score}</Text></Text>
      <Text style={styles.finalScore}>‚è± Th·ªùi gian ho√†n th√†nh: </Text>
      <Text style={styles.scoreNumber}>{formatTime(elapsedTime)}</Text>
        <View style={styles.buttonWrapper}>
        <Button title="üîÅ Ch∆°i l·∫°i" onPress={handleRestart} color="#6200ee" />
        </View>
        <View style={styles.buttonWrapper}>
        <Button title="üì± Quay v·ªÅ trang ch·ªß" onPress={QuizGame} color="#6200ee" />
        </View>
    </LinearGradient>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  gameOverText: {
    fontSize: 36,
    fontWeight: 'bold',
    color: '#1a237e',
    marginBottom: 20,
  },
  finalScore: {
    fontSize: 24,
    fontWeight: '600',
    color: '#004d40',
    marginBottom: 30,
  },
  scoreNumber: {
    fontWeight: 'bold',
    color: '#d32f2f',
    fontSize: 20,
    marginBottom: 30,
    marginTop: -10,
  },
  buttonWrapper: {
    width: '60%',
  },
});

export default GameOverScreen;
